// Code generated by timoni. DO NOT EDIT.

//timoni:generate timoni vendor crd -f https://github.com/strimzi/strimzi-kafka-operator/releases/download/0.40.0/strimzi-crds-0.40.0.yaml

package v1beta2

import "strings"

#KafkaRebalance: {
	// APIVersion defines the versioned schema of this representation
	// of an object. Servers should convert recognized schemas to the
	// latest internal value, and may reject unrecognized values.
	// More info:
	// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	apiVersion: "kafka.strimzi.io/v1beta2"

	// Kind is a string value representing the REST resource this
	// object represents. Servers may infer this from the endpoint
	// the client submits requests to. Cannot be updated. In
	// CamelCase. More info:
	// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	kind: "KafkaRebalance"
	metadata!: {
		name!: strings.MaxRunes(253) & strings.MinRunes(1) & {
			string
		}
		namespace!: strings.MaxRunes(63) & strings.MinRunes(1) & {
			string
		}
		labels?: {
			[string]: string
		}
		annotations?: {
			[string]: string
		}
	}

	// The specification of the Kafka rebalance.
	spec!: #KafkaRebalanceSpec
}

// The specification of the Kafka rebalance.
#KafkaRebalanceSpec: {
	// The list of newly added brokers in case of scaling up or the
	// ones to be removed in case of scaling down to use for
	// rebalancing. This list can be used only with rebalancing mode
	// `add-brokers` and `removed-brokers`. It is ignored with `full`
	// mode.
	brokers?: [...int]

	// The upper bound of ongoing partition replica movements between
	// disks within each broker. Default is 2.
	concurrentIntraBrokerPartitionMovements?: >=0 & int

	// The upper bound of ongoing partition leadership movements.
	// Default is 1000.
	concurrentLeaderMovements?: >=0 & int

	// The upper bound of ongoing partition replica movements going
	// into/out of each broker. Default is 5.
	concurrentPartitionMovementsPerBroker?: >=0 & int

	// A regular expression where any matching topics will be excluded
	// from the calculation of optimization proposals. This
	// expression will be parsed by the java.util.regex.Pattern
	// class; for more information on the supported format consult
	// the documentation for that class.
	excludedTopics?: string

	// A list of goals, ordered by decreasing priority, to use for
	// generating and executing the rebalance proposal. The supported
	// goals are available at
	// https://github.com/linkedin/cruise-control#goals. If an empty
	// goals list is provided, the goals declared in the
	// default.goals Cruise Control configuration parameter are used.
	goals?: [...string]

	// Mode to run the rebalancing. The supported modes are `full`,
	// `add-brokers`, `remove-brokers`.
	// If not specified, the `full` mode is used by default.
	//
	// * `full` mode runs the rebalancing across all the brokers in
	// the cluster.
	// * `add-brokers` mode can be used after scaling up the cluster
	// to move some replicas to the newly added brokers.
	// * `remove-brokers` mode can be used before scaling down the
	// cluster to move replicas out of the brokers to be removed.
	mode?: "full" | "add-brokers" | "remove-brokers"

	// Enables intra-broker disk balancing, which balances disk space
	// utilization between disks on the same broker. Only applies to
	// Kafka deployments that use JBOD storage with multiple disks.
	// When enabled, inter-broker balancing is disabled. Default is
	// false.
	rebalanceDisk?: bool

	// A list of strategy class names used to determine the execution
	// order for the replica movements in the generated optimization
	// proposal. By default BaseReplicaMovementStrategy is used,
	// which will execute the replica movements in the order that
	// they were generated.
	replicaMovementStrategies?: [...string]

	// The upper bound, in bytes per second, on the bandwidth used to
	// move replicas. There is no limit by default.
	replicationThrottle?: >=0 & int

	// Whether to allow the hard goals specified in the Kafka CR to be
	// skipped in optimization proposal generation. This can be
	// useful when some of those hard goals are preventing a balance
	// solution being found. Default is false.
	skipHardGoalCheck?: bool
}
